from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)

BOT_TOKEN = "7661463654:AAElQ6ZtcH229o-ww26xDcASXh42cIYS02Y"

MAX_DRIVERS = 10

# –ü–∞–º—è—Ç—å –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–∫–µ
drivers = set()
pending_order = None

def furniture_button():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üöö –•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –º–µ–±–µ–ª—å?", callback_data="order_furniture")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=furniture_button()
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "order_furniture":
        await query.edit_message_text("üìÖ –ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏ –º–µ–±–µ–ª—å?")
        return 1  # ASK_DATE

async def ask_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["date"] = update.message.text.strip()
    await update.message.reply_text("üì¶ –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ–∑—Ç–∏?")
    return 2

async def ask_goods(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["goods"] = update.message.text.strip()
    await update.message.reply_text("üè† –û—Ç–∫—É–¥–∞ –∑–∞–±–∏—Ä–∞–µ–º?")
    return 3

async def ask_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["from"] = update.message.text.strip()
    await update.message.reply_text("üè† –ö—É–¥–∞ –≤–µ–∑—ë–º?")
    return 4

async def ask_to(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["to"] = update.message.text.strip()
    await update.message.reply_text("üë∑‚Äç‚ôÇÔ∏è –°–∫–æ–ª—å–∫–æ –≥—Ä—É–∑—á–∏–∫–æ–≤ –Ω—É–∂–Ω–æ?")
    return 5

async def ask_loaders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["loaders"] = update.message.text.strip()
    await update.message.reply_text("üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?")
    return 6

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pending_order
    context.user_data["phone"] = update.message.text.strip()

    if not drivers:
        await update.message.reply_text("üö´ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=furniture_button())
        return ConversationHandler.END

    full_order_text = (
        f"üìÖ –î–∞—Ç–∞: {context.user_data.get('date')}\n"
        f"üì¶ –ß—Ç–æ –ø–µ—Ä–µ–≤–æ–∑–∏–º: {context.user_data.get('goods')}\n"
        f"üè† –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {context.user_data.get('from')}\n"
        f"üè† –ê–¥—Ä–µ—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {context.user_data.get('to')}\n"
        f"üë∑‚Äç‚ôÇÔ∏è –ì—Ä—É–∑—á–∏–∫–∏: {context.user_data.get('loaders')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}"
    )
    client_id = update.effective_user.id

    pending_order = {
        "text": full_order_text,
        "client_id": client_id,
        "message_ids": {},
        "claimed": False
    }

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="accept")]
    ])

    for drv_id in drivers:
        msg = await context.bot.send_message(
            chat_id=drv_id,
            text=f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n{full_order_text}",
            reply_markup=keyboard
        )
        pending_order["message_ids"][drv_id] = msg.message_id

    await update.message.reply_text("‚úÖ –ñ–¥–∏—Ç–µ –∑–≤–æ–Ω–∫–∞.", reply_markup=furniture_button())
    return ConversationHandler.END

async def accept_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global pending_order
    query = update.callback_query
    await query.answer()
    uid = query.from_user.id

    if not pending_order or pending_order["claimed"]:
        await query.edit_message_text("üö´ –ó–∞—è–≤–∫–∞ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º.")
        return

    if query.data == "accept":
        pending_order["claimed"] = True

        await context.bot.send_message(
            chat_id=pending_order["client_id"],
            text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è–ª –≤–æ–¥–∏—Ç–µ–ª—å @{query.from_user.username or uid}."
        )
        await query.edit_message_text("‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞—è–≤–∫—É! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞–ø—Ä—è–º—É—é.")

        for drv_id, msg_id in pending_order["message_ids"].items():
            if drv_id != uid:
                try:
                    await context.bot.edit_message_text(
                        chat_id=drv_id,
                        message_id=msg_id,
                        text="‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º."
                    )
                except Exception:
                    pass

        pending_order = None

async def register(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in drivers:
        await update.message.reply_text("‚ùó –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.")
    elif len(drivers) >= MAX_DRIVERS:
        await update.message.reply_text("‚ö†Ô∏è –õ–∏–º–∏—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.")
    else:
        drivers.add(user_id)
        await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å!")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register))

    client_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler, pattern="order_furniture")],
        states={
            1: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_date)],
            2: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_goods)],
            3: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_from)],
            4: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_to)],
            5: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_loaders)],
            6: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    app.add_handler(client_conv_handler)
    app.add_handler(CallbackQueryHandler(accept_order, pattern="accept"))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...")
    app.run_polling()

if __name__ == "__main__":
    main()
